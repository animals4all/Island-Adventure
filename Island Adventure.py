import pygame, random, sys, islandmap
from pygame.locals import *

FPS = 30
WINDOWWIDTH = 650
WINDOWHEIGHT = 600
HALF_WINWIDTH = int(WINDOWWIDTH/2)
HALF_WINHEIGHT = int(WINDOWHEIGHT/ 2)
TILEHEIGHT = 35
TILEWIDTH = 35

CAMERASLACK = 90
BACKGROUND = pygame.image.load("waterbg.png")

PLAYERSPRITES = {"down":[pygame.image.load("playercharacterD1.png"), pygame.image.load("playercharacterD2.png"), pygame.image.load("playercharacterD1.png"), pygame.image.load("playercharacterD3.png")],
                 "up":[pygame.image.load("playercharacterU1.png"), pygame.image.load("playercharacterU2.png"), pygame.image.load("playercharacterU1.png"), pygame.image.load("playercharacterU3.png")],
                 "right":[pygame.image.load("playercharacterR1.png"), pygame.image.load("playercharacterR2.png"), pygame.image.load("playercharacterR1.png"), pygame.image.load("playercharacterR3.png")],
                 "left":[pygame.image.load("playercharacterL1.png"), pygame.image.load("playercharacterL2.png"), pygame.image.load("playercharacterL1.png"), pygame.image.load("playercharacterL3.png")]}

WALKTILES = {"G":pygame.image.load("grasspattern.png"),
          "D":pygame.image.load("dirtpattern.png"),
          "M":pygame.image.load("mudpattern.png"),
          "S":pygame.image.load("sandpattern.png"),
          "R":pygame.image.load("rockpattern.png"),
          "T":pygame.image.load("smoothrockpattern.png"),
          "-":None}

COLLIDETILES = {"W":pygame.image.load("waterpattern.png"),
                "R":pygame.image.load("rockwallpattern.png"),
                "-":None}

PLAYERSPEED = 5

MAP_X = 41
MAP_Y = 40
MAPWIDTH = MAP_X * TILEWIDTH
MAPHEIGHT = MAP_Y * TILEHEIGHT
HALF_MAPWIDTH = int(MAPWIDTH/2)
HALF_MAPHEIGHT = int(MAPHEIGHT/2)
MAP = [["-", "-", "G", "G", "G", "-", "-", "-", "-", "-", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["-", "G", "G", "G", "G", "G", "-", "-", "-", "-", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "-", "-", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
       ["S", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "G", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"]]

COLLIDERS = [["W", "W", "-", "-", "-", "W", "W", "W", "W", "W", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["W", "-", "-", "-", "-", "-", "W", "W", "W", "W", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "W", "W", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
             ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]]
       
def main():
    global DISPLAYSURF, FPSCLOCK, FONTOBJ
    
    pygame.init()
    FONTOBJ = pygame.font.Font('freesansbold.ttf', 32)
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))

    pygame.display.set_caption("Island Adventure")

    while True:
        if runGame() == False:
            pygame.quit()
            sys.exit()

def runGame():
    player = {"x": int(WINDOWWIDTH/2),
              "y": int(WINDOWHEIGHT/2),
              "orientation": "down",
              "index": 0,
              "size": 50}
    
    goingUp = False
    goingDown = False
    goingLeft = False
    goingRight = False
    goingNW = False
    goingNE = False
    goingSW = False
    goingSE = False

    cameraX = WINDOWWIDTH
    cameraY = WINDOWHEIGHT

    while True:
        sprite = PLAYERSPRITES[player["orientation"]][player["index"]]
        
        if (player["x"] + player["size"]) > WINDOWWIDTH:
            cameraX -= WINDOWWIDTH
            player["x"] = 0
        elif player["x"] < 0:
            cameraX += WINDOWWIDTH
            player["x"] = WINDOWWIDTH - player["size"]
        if (player["y"] + player["size"]) > WINDOWHEIGHT:
            cameraY -= WINDOWHEIGHT
            player["y"] = 0
        elif player["y"] < 0:
            cameraY += WINDOWHEIGHT
            player["y"] = WINDOWHEIGHT - player["size"]
        
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
                
            if event.type == KEYDOWN:
                if event.key == K_w:
                    goingUp = True
                    player["orientation"] = "up"
                elif event.key == K_s:
                    goingDown = True
                    player["orientation"] = "down"
                if event.key == K_a:
                    goingLeft = True
                    player["orientation"] = "left"
                elif event.key == K_d:
                    goingRight = True
                    player["orientation"] = "right"

            if event.type == KEYUP:
                if event.key == K_w:
                    goingUp = False
                    player["index"] = 0
                elif event.key == K_s:
                    goingDown = False
                    player["index"] = 0
                elif event.key == K_a:
                    goingLeft = False
                    player["index"] = 0
                elif event.key == K_d:
                    goingRight = False
                    player["index"] = 0

        if True in (goingUp, goingDown, goingLeft, goingRight):
            if goingUp:
                player["y"] -= PLAYERSPEED
            elif goingDown:
                player["y"] += PLAYERSPEED
            if goingLeft:
                player["x"] -= PLAYERSPEED
            elif goingRight:
                player["x"] += PLAYERSPEED

            if player["index"] + 1 > len(PLAYERSPRITES[player["orientation"]]) - 1:
                player["index"] = 0
            else:
                player["index"] += 1
                    
        drawBoard(cameraX, cameraY)
        DISPLAYSURF.blit(sprite, (player["x"], player["y"]))
        pygame.display.update()
        FPSCLOCK.tick()

def drawBoard(cameraX, cameraY):
    DISPLAYSURF.blit(BACKGROUND, (0, 0))
    mapSurf = pygame.Surface((MAPWIDTH, MAPHEIGHT))
    mapRect = mapSurf.get_rect()
    mapRect.center = (cameraX, cameraY)
    
    left = 0
    top = 0
    
    for y in range(MAP_Y):
        for x in range(MAP_X):
            tile = WALKTILES[MAP[y][x]]
            if tile != None:
                mapSurf.blit(tile, (left, top))
                
            collider = COLLIDETILES[COLLIDERS[y][x]]
            if collider != None:
                mapSurf.blit(collider, (left, top))
                
            left += TILEWIDTH
        left = 0
        top += TILEHEIGHT
        
    DISPLAYSURF.blit(mapSurf, mapRect)

if __name__ == "__main__":
    main()
